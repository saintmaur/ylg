* send-login
Syntax:

send-login email => result
Arguments and Values:

email — уникальный почтовый адрес пользователя

result — возвращаемое значение
Description:

При успешном выполнении отправляет на пользовательский email новый
сгенерированный пароль и возвращает истину

Если указанный email не найден — возвращает ложь

В случае ошибки (в том числе и в параметре) — сигнализирует ошибку:
чаще всего — User/err-param
Examples:

(send-login "inbox@example.com") => T
* registration
Syntax:

registration email => result
Arguments and Values:

email — строка, с уникальным почтовым адресом пользователя

result — возвращаемое значение
Description:

При успешном выполнении создает аккаунт пользователя и возвращает его
в result

Если указанный email уже существует - возвращает ложь.

В случае ошибки (в том числе и в параметре) - сигнализирует ошибку,
например User/err-param
Examples:

(registration "inbox@example.com") => #<ACCOUNT>
* logoff
Syntax:

logoff => T
Description:

Сбрасывает current-user и пользовательскую сессию.
Examples:

(logoff) => T
* get-account
Syntax:

get-account email => result
Arguments and Values:

email — строка, с уникальным почтовым адресом пользователя

result — возвращаемое значение
Description:

При успешном выполнении возвращает аккаунт пользователя и возвращает
его в result

Если аккаунт с указанным email-ом не найден - возвращает ложь.

В случае ошибки (в том числе и в параметре) - сигнализирует ошибку,
например User/err-param
Examples:

(get-account "inbox@example.com") => #<ACCOUNT>
* err-permission
Description:

Сигнализируется при попытке сделать что-то такое, на что не хватает
прав - например, удалить чужой аккаунт не будучи администратором
* err-param
Description:

Сигнализируется, если параметр не верен, например, при регистрастрации
User/registration вместо email передано непонятно что.
* enter
Syntax:

enter email password => result
Arguments and Values:

email — уникальный почтовый адрес пользователя

password — пароль пользователя

result — возвращаемое значение
Description:

Функция выполняется успешно, если аккаунт с таким email-ом найден и
password, переданный в параметрах совпадает с полем password или c
полем new-password аккаунта
При успешном выполнении:

    Устанавливает поле аккаунта password равным параметру password
    Устанавливает поле аккаунта new-password в пустую строку
    устанавливает CURRENT_USER в обьект аккаунта
    возвращает истину.

Если указанный email не найден или пароль не соответствует —
возвращает ложь

В случае ошибки (в том числе и в параметре) — сигнализирует ошибку:
чаще всего — User/err-param
Examples:

(enter "inbox@example.com" "my_secret_password") => T
* delete-account
Syntax:

delete-account email => result
Arguments and Values:

email — строка, с уникальным почтовым адресом пользователя

result — возвращаемое значение
Description:

При успешном выполнении (т.е. если хватает прав) удаляет
соответствующий аккаунт и возвращает истину.

Если указанный account не существует - возвращает ложь (эта ситуация
может возникнуть при попытке удалить один и тот же аккаунт дважды,
например когда из-за задержек в сети пользователь дважды нажимает на
кнопку удаления аккаунта).

В случае ошибки (в том числе и в параметре) — сигнализирует
ошибку. Например, при попытке удалить чужой аккаунт не являясь
администратором — User/err-permission
Examples:

(delete-account (get-account "inbox@example.com")) => T
* all-accounts
Syntax:

all-accounts => result
Arguments and Values:

result — список зарегистрированных в системе аккаунтов
Description:

При успешном выполнении возвращает список зарегистрированных в системе
аккаунтов c их идентификаторами (список пар {аккунт , идентификатор})

Если аккаунтов в системе нет - возвращает пустой список
Examples:

(all-accounts) => ((#<USER {BC61D39}> . 2) (#<USER {BC66DF1}> . 3))
